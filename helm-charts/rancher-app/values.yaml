# Default values for rancher-app
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
replicaCount: 2

image:
  repository: ghcr.io/rancher-platform
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Environment configuration
environment: "staging"

# Service Account
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080
  annotations: {}

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: rancher-app.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: rancher-app-tls
      hosts:
        - rancher-app.local

# Resource limits and requests
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Liveness and Readiness Probes
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node selector and affinity
nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - rancher-app
        topologyKey: kubernetes.io/hostname

# Persistence
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 8Gi
  annotations: {}

# ConfigMap configuration
configMap:
  enabled: true
  data:
    DATABASE_URL: "postgresql://user:password@postgres:5432/rancher_db"
    REDIS_URL: "redis://redis:6379"
    LOG_LEVEL: "info"
    ENVIRONMENT: "staging"

# Secret configuration
secret:
  enabled: true
  data:
    DATABASE_PASSWORD: "Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24="  # base64 encoded
    API_KEY: "YXBpLWtleS1jaGFuZ2UtbWU="  # base64 encoded

# Environment variables
env:
  - name: PORT
    value: "8080"
  - name: NODE_ENV
    value: "production"

# Environment variables from ConfigMap
envFrom:
  - configMapRef:
      name: rancher-app-config
  - secretRef:
      name: rancher-app-secret

# Init containers
initContainers: []

# Sidecar containers
sidecars: []

# Additional volumes
volumes: []

# Additional volume mounts
volumeMounts: []

# Pod annotations
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

# Pod labels
podLabels: {}

# Database configuration (if using external database)
database:
  enabled: false
  type: postgresql
  host: ""
  port: 5432
  name: ""
  username: ""
  password: ""
  ssl: false

# Redis configuration (if using external Redis)
redis:
  enabled: false
  host: ""
  port: 6379
  password: ""
  database: 0

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels: {}

# Network Policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: nginx-ingress
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 5432  # PostgreSQL
      - protocol: TCP
        port: 6379  # Redis
      - protocol: TCP
        port: 53    # DNS
      - protocol: UDP
        port: 53    # DNS
      - protocol: TCP
        port: 443   # HTTPS
      - protocol: TCP
        port: 80    # HTTP

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"  # Daily at 2 AM
  retention: 30
  storageClass: ""

# Testing
tests:
  enabled: true
  image:
    repository: curlimages/curl
    tag: latest
    pullPolicy: IfNotPresent

# Additional containers for jobs
jobs:
  migration:
    enabled: false
    image:
      repository: migrate/migrate
      tag: latest
      pullPolicy: IfNotPresent
    command: ["migrate"]
    args: ["-path", "/migrations", "-database", "$(DATABASE_URL)", "up"]

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods", "services", "endpoints"]
      verbs: ["get", "list", "watch"]

# Pod Security Standards
podSecurityStandards:
  enforce: "restricted"
  audit: "restricted"
  warn: "restricted"

# Extra manifests to deploy
extraManifests: []

# Prometheus rules
prometheusRules:
  enabled: false
  rules: []

# Grafana dashboard
grafanaDashboard:
  enabled: false
  configMap: ""

# Custom labels for all resources
commonLabels: {}

# Custom annotations for all resources
commonAnnotations: {}